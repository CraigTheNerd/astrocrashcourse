---
// const activeTextColor = '#A741FF';

export interface Props {
    //  The active text color is a prop for the color of the active tab
    // activeTextColor?: string;

    //  We're making our tabs dynamic so we'll have the content as props
    //  The Tab Headings and the Tab Bodies (contents) will be props

    //  Tab Headings - An Array of Strings
    headings: string[];

    //  Tab Contents - An Array of Strings
    contents: string[];
}

const { headings, contents } = Astro.props as Props;
---

<style>
.tabs {
    margin-top: 30px;
}

.tabs-header {
    display: flex;
    background: #333;
    color: #fff;
    padding: 10px 20px;
}

.tabs-header li {
    margin-right: 20px;
    cursor: pointer;
}

.tabs-content {
    font-size: 18px;
    padding: 20px;
    border: 1px solid #333;
    font-weight: bold;
    background: #f4f4f4;
}
</style>

<div class="tabs">
    <ul class="tabs-header">

        {headings.map(heading => (
            <li>{heading}</li>
        ))}

        <!-- <li class="default-tab">NPM</li>
        <li>PNPM</li>
        <li>YARN</li> -->
    </ul>
    <ul class="tabs-content">

        {contents.map(content => (
            <li class="tab"><code>{content}</code></li>
        ))}

        <!-- <li class="tab">
            <code>$ npm create astro@latest</code>
        </li>
        <li class="tab">
            <code>$ pnpm create astro@latest</code>
        </li>
        <li class="tab">
            <code>$ yarn create astro</code>
        </li> -->
    </ul>
</div>

<!-- Doesn't work on ios -->
<!-- <script define:vars={{ activeTextColor }}> -->


<script>
    function createTabs(element) {
        const header = element.querySelector('.tabs-header');
        const content = element.querySelector('.tabs-content');
        const tab_headers = [...header.children];
        const tab_contents = [...content.children];
        tab_contents.forEach((x) => (x.style.display = 'none'));
        let current_tab_index = -1;

        function setTab(index) {
            if (current_tab_index > -1) {
                tab_headers[current_tab_index].style.fontWeight = 400;
                tab_headers[current_tab_index].style.color = '#fff';
                tab_contents[current_tab_index].style.display = 'none';
            }
            tab_headers[index].style.fontWeight = 800;
            // tab_headers[index].style.color = activeTextColor; - DOES NOT WORK ON IOS
            tab_headers[index].style.color = '#A741FF';
            tab_contents[index].style.display = 'flex';
            current_tab_index = index;
        }

        let default_tab_index = tab_headers.findIndex((x) => {
            return [...x.classList].indexOf('default-tab') > -1;
        });

        default_tab_index = default_tab_index === -1 ? 0 : default_tab_index;
        setTab(default_tab_index);
        tab_headers.forEach((x, i) => (x.onclick = (event) => setTab(i)));
    }

    // Run
    [...document.querySelectorAll('.tabs')].forEach((x) => createTabs(x));
</script>